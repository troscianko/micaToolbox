// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//X 0.9937798008494033
//Y 0.9964842045242025
//Z 0.9972397332829473


// Generated: 2019/2/4   13:41:24


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class eIm_52mm_CIE_XYZ_1931_D65_ implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] visibleR;
float[] visibleG;
float[] visibleB;
float[] uvB;
float[] uvR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] X = new float[dimension];
float[] Y = new float[dimension];
float[] Z = new float[dimension];

visibleR = (float[]) stack.getPixels(1);
visibleG = (float[]) stack.getPixels(2);
visibleB = (float[]) stack.getPixels(3);
uvB = (float[]) stack.getPixels(4);
uvR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
X[i] = (float) (-0.010604521803582862 +(visibleR[i]*0.005788774482156006)+(visibleG[i]*0.004482416148443919)+(visibleB[i]*0.002450178145838906)+(uvB[i]*-0.009454793287595312)+(uvR[i]*0.007257622522415585)+(visibleR[i]*visibleG[i]*1.010151071049021E-5)+(visibleR[i]*visibleB[i]*5.783612711418899E-5)+(visibleR[i]*uvB[i]*3.6572164412860206E-5)+(visibleR[i]*uvR[i]*-1.0253532602819884E-4)+(visibleG[i]*visibleB[i]*-9.772200423706812E-5)+(visibleG[i]*uvB[i]*1.4264790717970823E-4)+(visibleG[i]*uvR[i]*-2.7277020647491315E-5)+(visibleB[i]*uvB[i]*2.571321969436409E-4)+(visibleB[i]*uvR[i]*-3.469866569441968E-4)+(uvB[i]*uvR[i]*8.303267721254367E-5));
Y[i] = (float) (-0.008617207034177472 +(visibleR[i]*0.0016724848514941607)+(visibleG[i]*0.011278398550775632)+(visibleB[i]*-0.0011779036255574118)+(uvB[i]*-0.005240409051168954)+(uvR[i]*0.004182889523075492)+(visibleR[i]*visibleG[i]*5.417727815371183E-6)+(visibleR[i]*visibleB[i]*2.9427000386139943E-5)+(visibleR[i]*uvB[i]*5.5435437240291134E-5)+(visibleR[i]*uvR[i]*-8.964640767084598E-5)+(visibleG[i]*visibleB[i]*-4.9868202588416126E-5)+(visibleG[i]*uvB[i]*3.137900075644498E-6)+(visibleG[i]*uvR[i]*4.5467037135560865E-5)+(visibleB[i]*uvB[i]*1.595512144825604E-4)+(visibleB[i]*uvR[i]*-1.9583986277004617E-4)+(uvB[i]*uvR[i]*4.185175213066007E-5));
Z[i] = (float) (-0.0037694100758097586 +(visibleR[i]*3.4510267162398436E-4)+(visibleG[i]*-0.0038200426419413786)+(visibleB[i]*0.014441117229752025)+(uvB[i]*-0.0038382827792310757)+(uvR[i]*0.0033145454844006406)+(visibleR[i]*visibleG[i]*-1.5948045461044726E-6)+(visibleR[i]*visibleB[i]*4.426068943056423E-5)+(visibleR[i]*uvB[i]*3.5034091281608334E-5)+(visibleR[i]*uvR[i]*-8.193955398496396E-5)+(visibleG[i]*visibleB[i]*-3.564688485707622E-5)+(visibleG[i]*uvB[i]*-1.8099313153173007E-4)+(visibleG[i]*uvR[i]*2.535778670353558E-4)+(visibleB[i]*uvB[i]*2.2223209303389978E-4)+(visibleB[i]*uvR[i]*-2.972249280014201E-4)+(uvB[i]*uvR[i]*5.537581611812458E-5));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("X", X);
outStack.addSlice("Y", Y);
outStack.addSlice("Z", Z);
new ImagePlus("Output", outStack).show();

}
}
