// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//lw 0.9924830867746872
//mw 0.996389109221914
//sw 0.9983007490819804
//uv 0.998447741866185
//dbl 0.9968170366590464


// Generated: 2018/11/4   7:0:26


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class eIm_52mm_Bluetit_D65_ implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] visibleR;
float[] visibleG;
float[] visibleB;
float[] uvB;
float[] uvR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] lw = new float[dimension];
float[] mw = new float[dimension];
float[] sw = new float[dimension];
float[] uv = new float[dimension];
float[] dbl = new float[dimension];

visibleR = (float[]) stack.getPixels(1);
visibleG = (float[]) stack.getPixels(2);
visibleB = (float[]) stack.getPixels(3);
uvB = (float[]) stack.getPixels(4);
uvR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
lw[i] = (float) (0.022905984201206608 +(visibleR[i]*0.009130962129146169)+(visibleG[i]*-6.931002405078221E-4)+(visibleB[i]*0.001527418507216934)+(uvB[i]*-0.02444318949591107)+(uvR[i]*0.021860681330369745)+(visibleR[i]*visibleG[i]*1.2277363724181112E-4)+(visibleR[i]*visibleB[i]*-5.1415269281608874E-5)+(visibleR[i]*uvB[i]*2.952081026375817E-4)+(visibleR[i]*uvR[i]*-2.9500045501967885E-4)+(visibleG[i]*visibleB[i]*-5.6639390119349454E-5)+(visibleG[i]*uvB[i]*6.559162066075225E-5)+(visibleG[i]*uvR[i]*-1.7869882008725032E-6)+(visibleB[i]*uvB[i]*4.8139675368910704E-4)+(visibleB[i]*uvR[i]*-5.443153716563307E-4)+(uvB[i]*uvR[i]*5.899154956944994E-5));
mw[i] = (float) (-0.008812005068159923 +(visibleR[i]*-0.0013150218368788349)+(visibleG[i]*0.015935458615581283)+(visibleB[i]*-0.003905372946815662)+(uvB[i]*-0.002056912440483394)+(uvR[i]*0.002630321050265296)+(visibleR[i]*visibleG[i]*-1.041838112625074E-5)+(visibleR[i]*visibleB[i]*2.9563886624047687E-5)+(visibleR[i]*uvB[i]*9.670771978072251E-5)+(visibleR[i]*uvR[i]*-1.1742183998416627E-4)+(visibleG[i]*visibleB[i]*-1.8098114063254944E-5)+(visibleG[i]*uvB[i]*-2.3492857238229211E-4)+(visibleG[i]*uvR[i]*2.3134382155407427E-4)+(visibleB[i]*uvB[i]*1.8582927014735074E-4)+(visibleB[i]*uvR[i]*-1.8325865226244257E-4)+(uvB[i]*uvR[i]*8.583959670605113E-6));
sw[i] = (float) (-0.0030129930946663245 +(visibleR[i]*1.0793404370649423E-4)+(visibleG[i]*-0.0030201967951680097)+(visibleB[i]*0.01318712005840212)+(uvB[i]*-0.0029607951911885203)+(uvR[i]*0.0031008769675998664)+(visibleR[i]*visibleG[i]*4.990300020853979E-6)+(visibleR[i]*visibleB[i]*2.7556504751168852E-5)+(visibleR[i]*uvB[i]*3.687815846121728E-5)+(visibleR[i]*uvR[i]*-7.326513532492196E-5)+(visibleG[i]*visibleB[i]*-1.6021523946173483E-5)+(visibleG[i]*uvB[i]*-6.334111524805345E-5)+(visibleG[i]*uvR[i]*1.0868182931971717E-4)+(visibleB[i]*uvB[i]*8.520991024185508E-5)+(visibleB[i]*uvR[i]*-1.4452427373637137E-4)+(uvB[i]*uvR[i]*4.393183678179659E-5));
uv[i] = (float) (-0.004787015474952463 +(visibleR[i]*-1.9348191146884086E-5)+(visibleG[i]*-6.35592966540346E-4)+(visibleB[i]*0.0017348504696914956)+(uvB[i]*-0.0030048690887677855)+(uvR[i]*0.01248733631236344)+(visibleR[i]*visibleG[i]*-9.297000066770355E-6)+(visibleR[i]*visibleB[i]*5.976326362479731E-5)+(visibleR[i]*uvB[i]*1.7479472443743618E-5)+(visibleR[i]*uvR[i]*-7.028672471954755E-5)+(visibleG[i]*visibleB[i]*-2.9782786318092355E-5)+(visibleG[i]*uvB[i]*-2.019643359253094E-4)+(visibleG[i]*uvR[i]*2.4928930047430026E-4)+(visibleB[i]*uvB[i]*2.632498645652887E-4)+(visibleB[i]*uvR[i]*-3.144498087804237E-4)+(uvB[i]*uvR[i]*3.522612441909669E-5));
dbl[i] = (float) (1.9171228648012784E-4 +(visibleR[i]*0.001873628851905262)+(visibleG[i]*0.008238559926106006)+(visibleB[i]*9.067236612538048E-4)+(uvB[i]*-0.008673042715868766)+(uvR[i]*0.007608939699699967)+(visibleR[i]*visibleG[i]*3.1857660089051605E-5)+(visibleR[i]*visibleB[i]*1.7799559695533903E-6)+(visibleR[i]*uvB[i]*1.1256319696451218E-4)+(visibleR[i]*uvR[i]*-1.317290833696743E-4)+(visibleG[i]*visibleB[i]*-3.429358089959745E-5)+(visibleG[i]*uvB[i]*1.930370375459246E-5)+(visibleG[i]*uvR[i]*1.2684991326799551E-5)+(visibleB[i]*uvB[i]*1.5145796453785277E-4)+(visibleB[i]*uvR[i]*-1.7907117640200864E-4)+(uvB[i]*uvR[i]*3.338384303216318E-5));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("lw", lw);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
outStack.addSlice("uv", uv);
outStack.addSlice("dbl", dbl);
new ImagePlus("Output", outStack).show();

}
}
