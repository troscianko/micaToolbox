// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//lw 0.9986633420184126
//mw 0.9997200022101331
//sw 0.9991077844808742
//uv 0.9989471994213537
//dbl 0.999791689603302


// Generated: 2019/2/28   10:29:29


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class Sony_A7_Nikkor_EL_80mm_D65_to_Bluetit_D65 implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] vR;
float[] vG;
float[] vB;
float[] uB;
float[] uR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] lw = new float[dimension];
float[] mw = new float[dimension];
float[] sw = new float[dimension];
float[] uv = new float[dimension];
float[] dbl = new float[dimension];

vR = (float[]) stack.getPixels(1);
vG = (float[]) stack.getPixels(2);
vB = (float[]) stack.getPixels(3);
uB = (float[]) stack.getPixels(4);
uR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
lw[i] = (float) (-0.006410435120047505 +(vR[i]*0.009244907795639658)+(vG[i]*0.0038126022444044446)+(vB[i]*-0.0032405348322222067)+(uB[i]*0.0010024291629837313)+(uR[i]*-8.764707579811008E-4)+(vR[i]*vG[i]*-1.6517838969196593E-5)+(vR[i]*vB[i]*8.27854060698894E-6)+(vR[i]*uB[i]*-2.6134388811556316E-5)+(vR[i]*uR[i]*4.1042643228952026E-5)+(vG[i]*vB[i]*1.162837399998711E-5)+(vG[i]*uB[i]*6.560211914295168E-5)+(vG[i]*uR[i]*-9.253406914817057E-5)+(vB[i]*uB[i]*-4.7904391787151564E-5)+(vB[i]*uR[i]*5.676035397240047E-5)+(uB[i]*uR[i]*1.4217769402201761E-6));
mw[i] = (float) (0.003448040283157079 +(vR[i]*-0.0018710594981823125)+(vG[i]*0.0161643365816151)+(vB[i]*-0.0044139298686424145)+(uB[i]*-4.3952109487386736E-5)+(uR[i]*2.9298282494079015E-5)+(vR[i]*vG[i]*1.4693803249081121E-6)+(vR[i]*vB[i]*2.172282101126493E-6)+(vR[i]*uB[i]*5.334376941915437E-6)+(vR[i]*uR[i]*-5.693848893579169E-6)+(vG[i]*vB[i]*-5.12549485263548E-6)+(vG[i]*uB[i]*-5.61680597963821E-5)+(vG[i]*uR[i]*4.8168395827585204E-5)+(vB[i]*uB[i]*6.402384965725461E-5)+(vB[i]*uR[i]*-5.481344802030127E-5)+(uB[i]*uR[i]*1.8774648567126717E-6));
sw[i] = (float) (0.0022262226876448967 +(vR[i]*2.364371544145411E-4)+(vG[i]*-0.0022570402961037232)+(vB[i]*0.01122017372457177)+(uB[i]*0.0015101626386543545)+(uR[i]*-8.74994412097433E-4)+(vR[i]*vG[i]*1.3039945497350887E-7)+(vR[i]*vB[i]*-2.179965526850745E-7)+(vR[i]*uB[i]*-1.0428220547219983E-5)+(vR[i]*uR[i]*1.0698501693501424E-5)+(vG[i]*vB[i]*-1.4321011739200674E-6)+(vG[i]*uB[i]*-3.972165226149444E-5)+(vG[i]*uR[i]*3.100551841652779E-5)+(vB[i]*uB[i]*7.166200416516285E-5)+(vB[i]*uR[i]*-6.191337557663543E-5)+(uB[i]*uR[i]*1.852843938011295E-6));
uv[i] = (float) (1.188658808979906E-4 +(vR[i]*2.2386317667221598E-4)+(vG[i]*-5.611679144245237E-4)+(vB[i]*9.100201554683887E-4)+(uB[i]*0.0037270979402607316)+(uR[i]*0.005629730872468547)+(vR[i]*vG[i]*-7.190257730292098E-7)+(vR[i]*vB[i]*-1.8489074799932358E-6)+(vR[i]*uB[i]*9.110171736797835E-6)+(vR[i]*uR[i]*-1.742652056184616E-5)+(vG[i]*vB[i]*3.623842657452454E-8)+(vG[i]*uB[i]*-3.745994521546752E-5)+(vG[i]*uR[i]*4.776444799048646E-5)+(vB[i]*uB[i]*4.271654900864396E-5)+(vB[i]*uR[i]*-3.615819831451618E-5)+(uB[i]*uR[i]*-5.843468949665012E-6));
dbl[i] = (float) (-0.0012475517725485464 +(vR[i]*0.0015582397840843071)+(vG[i]*0.009708275703952085)+(vB[i]*-0.001373420892265064)+(uB[i]*4.533823012962334E-4)+(uR[i]*-4.0842907653779707E-4)+(vR[i]*vG[i]*-3.977705016942738E-6)+(vR[i]*vB[i]*8.71544970100723E-7)+(vR[i]*uB[i]*-1.6976667452770477E-5)+(vR[i]*uR[i]*2.3376437685602528E-5)+(vG[i]*vB[i]*4.136842433685412E-6)+(vG[i]*uB[i]*2.906696975829687E-5)+(vG[i]*uR[i]*-4.160194018769987E-5)+(vB[i]*uB[i]*-1.369187609729697E-5)+(vB[i]*uR[i]*1.9050124549170977E-5)+(uB[i]*uR[i]*6.90404507969195E-7));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("lw", lw);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
outStack.addSlice("uv", uv);
outStack.addSlice("dbl", dbl);
new ImagePlus("Output", outStack).show();

}
}
