// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//mw 0.9976363083846949
//sw 0.99703679918152
//uv 0.9972226380531354


// Generated: 2019/2/4   13:39:50


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class eIm_52mm_Honeybee_D65_ implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] visibleR;
float[] visibleG;
float[] visibleB;
float[] uvB;
float[] uvR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] mw = new float[dimension];
float[] sw = new float[dimension];
float[] uv = new float[dimension];

visibleR = (float[]) stack.getPixels(1);
visibleG = (float[]) stack.getPixels(2);
visibleB = (float[]) stack.getPixels(3);
uvB = (float[]) stack.getPixels(4);
uvR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
mw[i] = (float) (-0.004678351337677401 +(visibleR[i]*-4.7704296095889693E-4)+(visibleG[i]*0.007988717716553795)+(visibleB[i]*0.002850876476749885)+(uvB[i]*-0.0015435011120722116)+(uvR[i]*0.0017880149436108833)+(visibleR[i]*visibleG[i]*1.003413783511794E-6)+(visibleR[i]*visibleB[i]*8.678992338189555E-6)+(visibleR[i]*uvB[i]*4.2119192898420125E-5)+(visibleR[i]*uvR[i]*-5.541049718710406E-5)+(visibleG[i]*visibleB[i]*-9.366456766432735E-6)+(visibleG[i]*uvB[i]*-5.113664553391174E-5)+(visibleG[i]*uvR[i]*6.412315928026736E-5)+(visibleB[i]*uvB[i]*3.357523568667535E-5)+(visibleB[i]*uvR[i]*-4.766989658221394E-5)+(uvB[i]*uvR[i]*1.9285233701312424E-5));
sw[i] = (float) (-0.005955927190518628 +(visibleR[i]*3.438298376734211E-4)+(visibleG[i]*-0.003351533695306596)+(visibleB[i]*0.011001843260335962)+(uvB[i]*-0.0018558330618169434)+(uvR[i]*0.004501437981156045)+(visibleR[i]*visibleG[i]*-7.2106167680853E-6)+(visibleR[i]*visibleB[i]*7.448024111357941E-5)+(visibleR[i]*uvB[i]*6.98340859752612E-6)+(visibleR[i]*uvR[i]*-7.833356920291752E-5)+(visibleG[i]*visibleB[i]*-5.027122253753957E-5)+(visibleG[i]*uvB[i]*-2.317583202720303E-4)+(visibleG[i]*uvR[i]*3.276332886862342E-4)+(visibleB[i]*uvB[i]*3.825160580166343E-4)+(visibleB[i]*uvR[i]*-4.922313621000744E-4)+(uvB[i]*uvR[i]*7.581379382435555E-5));
uv[i] = (float) (-0.005356051747794815 +(visibleR[i]*-9.661656604833336E-6)+(visibleG[i]*-1.2437198464834695E-4)+(visibleB[i]*0.001954200687482907)+(uvB[i]*-0.005670166401858641)+(uvR[i]*0.014278417092193645)+(visibleR[i]*visibleG[i]*-1.5391966180578122E-5)+(visibleR[i]*visibleB[i]*6.329052428153764E-5)+(visibleR[i]*uvB[i]*5.9359295887957845E-5)+(visibleR[i]*uvR[i]*-1.0722745798116609E-4)+(visibleG[i]*visibleB[i]*-4.2246654792058955E-5)+(visibleG[i]*uvB[i]*-4.2896664061938157E-4)+(visibleG[i]*uvR[i]*4.7945503353630773E-4)+(visibleB[i]*uvB[i]*3.646039299000657E-4)+(visibleB[i]*uvR[i]*-3.8602459086244334E-4)+(uvB[i]*uvR[i]*1.4794743776243062E-5));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
outStack.addSlice("uv", uv);
new ImagePlus("Output", outStack).show();

}
}
