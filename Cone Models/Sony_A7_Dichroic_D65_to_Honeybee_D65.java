// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//mw 0.9999622286531333
//sw 0.9970155429816687
//uv 0.9979307830978527


// Generated: 2019/2/12   10:24:49


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class Sony_A7_Dichroic_D65_to_Honeybee_D65 implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] vR;
float[] vG;
float[] vB;
float[] uB;
float[] uR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] mw = new float[dimension];
float[] sw = new float[dimension];
float[] uv = new float[dimension];

vR = (float[]) stack.getPixels(1);
vG = (float[]) stack.getPixels(2);
vB = (float[]) stack.getPixels(3);
uB = (float[]) stack.getPixels(4);
uR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
mw[i] = (float) (2.7730210941082225E-6 +(vR[i]*-1.6552736597739742E-4)+(vG[i]*0.007955964475674452)+(vB[i]*0.0015144870251095203)+(uB[i]*4.7020349043364523E-4)+(uR[i]*1.8916162910131501E-4)+(vR[i]*vG[i]*-1.4741434437253636E-6)+(vR[i]*vB[i]*6.947206540784023E-7)+(vR[i]*uB[i]*-9.902301131454432E-6)+(vR[i]*uR[i]*1.0122729894788798E-5)+(vG[i]*vB[i]*6.514591776612055E-7)+(vG[i]*uB[i]*6.10007594167857E-6)+(vG[i]*uR[i]*-7.688954113548093E-6)+(vB[i]*uB[i]*5.010714635977804E-6)+(vB[i]*uR[i]*-2.6430551149681876E-6)+(uB[i]*uR[i]*-5.325141655018238E-7));
sw[i] = (float) (0.003206597341826066 +(vR[i]*5.973512314508495E-4)+(vG[i]*-0.003216330139572039)+(vB[i]*0.009673559076964532)+(uB[i]*0.003373842313701368)+(uR[i]*-6.65498440732856E-4)+(vR[i]*vG[i]*-3.724969563746758E-6)+(vR[i]*vB[i]*5.536506064080656E-6)+(vR[i]*uB[i]*-4.400745886945277E-5)+(vR[i]*uR[i]*3.681882478389213E-5)+(vG[i]*vB[i]*-4.889445003615017E-6)+(vG[i]*uB[i]*-4.7915018410382964E-5)+(vG[i]*uR[i]*4.796671353044103E-5)+(vB[i]*uB[i]*1.2373774581950575E-4)+(vB[i]*uR[i]*-1.1205908108481488E-4)+(uB[i]*uR[i]*6.595621343766114E-7));
uv[i] = (float) (-7.807629640555138E-4 +(vR[i]*4.275183802271603E-4)+(vG[i]*-8.76240445895864E-4)+(vB[i]*0.0016626653903475718)+(uB[i]*-9.699022802128347E-4)+(uR[i]*0.00963299002038917)+(vR[i]*vG[i]*-5.154754010090586E-6)+(vR[i]*vB[i]*-2.3981621482016376E-6)+(vR[i]*uB[i]*-4.170431341744775E-6)+(vR[i]*uR[i]*-6.302497123340521E-6)+(vG[i]*vB[i]*3.8142775942348605E-6)+(vG[i]*uB[i]*-1.4178541290733289E-5)+(vG[i]*uR[i]*3.298961316911886E-5)+(vB[i]*uB[i]*1.3852829412433898E-5)+(vB[i]*uR[i]*-1.0060005768395004E-5)+(uB[i]*uR[i]*-8.131713266654789E-6));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
outStack.addSlice("uv", uv);
new ImagePlus("Output", outStack).show();

}
}
