// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//mw 0.9999596346383925
//sw 0.9963238997606146
//uv 0.9978504740977341


// Generated: 2019/2/12   10:21:21


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class Sony_A7_Nikkor_EL_80mm_D65_to_Honeybee_D65 implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] vR;
float[] vG;
float[] vB;
float[] uB;
float[] uR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] mw = new float[dimension];
float[] sw = new float[dimension];
float[] uv = new float[dimension];

vR = (float[]) stack.getPixels(1);
vG = (float[]) stack.getPixels(2);
vB = (float[]) stack.getPixels(3);
uB = (float[]) stack.getPixels(4);
uR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
mw[i] = (float) (3.7960952822907314E-6 +(vR[i]*-7.098176741968475E-4)+(vG[i]*0.008146173956404434)+(vB[i]*0.001828668820434752)+(uB[i]*4.610278160244885E-4)+(uR[i]*2.477182295637681E-4)+(vR[i]*vG[i]*-9.242754421105839E-7)+(vR[i]*vB[i]*5.275949605953289E-7)+(vR[i]*uB[i]*-1.1744816609709042E-6)+(vR[i]*uR[i]*1.6311585817960675E-7)+(vG[i]*vB[i]*7.898117373363713E-8)+(vG[i]*uB[i]*-4.5559758101565124E-6)+(vG[i]*uR[i]*5.384453088885889E-6)+(vB[i]*uB[i]*9.385487497712074E-6)+(vB[i]*uR[i]*-8.175266817574432E-6)+(uB[i]*uR[i]*-5.004158541051932E-7));
sw[i] = (float) (0.0037502878513544498 +(vR[i]*5.630260356006238E-4)+(vG[i]*-0.0029370757847743574)+(vB[i]*0.00923233684142646)+(uB[i]*0.0034793112862619917)+(uR[i]*-6.0752870956727E-4)+(vR[i]*vG[i]*1.4401105061419894E-7)+(vR[i]*vB[i]*1.657056745570518E-8)+(vR[i]*uB[i]*-9.864796065037285E-6)+(vR[i]*uR[i]*4.905829981266941E-6)+(vG[i]*vB[i]*-3.7532809892760647E-6)+(vG[i]*uB[i]*-8.506803771576093E-5)+(vG[i]*uR[i]*8.046892924508531E-5)+(vB[i]*uB[i]*1.375165374432868E-4)+(vB[i]*uR[i]*-1.2329000231685834E-4)+(uB[i]*uR[i]*1.3571045826661533E-6));
uv[i] = (float) (-5.517833150596058E-4 +(vR[i]*3.514053744642666E-4)+(vG[i]*-8.066107150726607E-4)+(vB[i]*0.0016305188887449043)+(uB[i]*-0.0011308477615449436)+(uR[i]*0.009832868369760132)+(vR[i]*vG[i]*-2.007319642151131E-6)+(vR[i]*vB[i]*-4.295734910219906E-6)+(vR[i]*uB[i]*1.193256786933056E-5)+(vR[i]*uR[i]*-2.205666494746577E-5)+(vG[i]*vB[i]*2.3834879174745704E-6)+(vG[i]*uB[i]*-2.9270264913887335E-5)+(vG[i]*uR[i]*4.630944572521418E-5)+(vB[i]*uB[i]*1.87420889409116E-5)+(vB[i]*uR[i]*-1.3851281457175226E-5)+(uB[i]*uR[i]*-7.640480159540239E-6));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
outStack.addSlice("uv", uv);
new ImagePlus("Output", outStack).show();

}
}
